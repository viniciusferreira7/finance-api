// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(uuid())
  name           String
  email          String           @unique
  password_hash  String
  created_at     DateTime         @default(now())
  Expense        Expense[]
  Income         Income[]
  Category       Category[]
  MonthlyBudgets MonthlyBudget[]
  Balance        Balance[]
  IncomeHistory  IncomeHistory[]
  ExpenseHistory ExpenseHistory[]

  @@map("users")
}

model Income {
  id          String   @id @default(cuid())
  name        String
  value       Int
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())

  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String

  category      Category?       @relation(fields: [category_id], references: [id])
  category_id   String?
  IncomeHistory IncomeHistory[]

  @@map("incomes")
}

model IncomeHistory {
  id          String   @id @default(cuid())
  name        String
  value       Int
  description String?
  created_at  DateTime @default(now())

  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String

  category    Category? @relation(fields: [category_id], references: [id])
  category_id String?

  income    Income @relation(fields: [income_id], references: [id])
  income_id String

  @@map("income_histories")
}

model Expense {
  id          String   @id @default(cuid())
  name        String
  value       Int
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())

  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String

  category       Category?        @relation(fields: [category_id], references: [id])
  category_id    String?
  ExpenseHistory ExpenseHistory[]

  @@map("expenses")
}

model ExpenseHistory {
  id          String   @id @default(cuid())
  name        String
  value       Int
  description String?
  created_at  DateTime @default(now())

  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String

  category    Category? @relation(fields: [category_id], references: [id])
  category_id String?

  expense    Expense @relation(fields: [expense_id], references: [id])
  expense_id String

  @@map("expense_histories")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())

  user           User             @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id        String
  Expense        Expense[]
  Income         Income[]
  IncomeHistory  IncomeHistory[]
  ExpenseHistory ExpenseHistory[]

  @@map("categories")
}

model MonthlyBudget {
  id         String   @id @default(cuid())
  name       String
  budget     Int
  deadline   DateTime
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String

  @@map("monthly_budgets")
}

model Balance {
  id         String   @id @default(cuid())
  name       String
  amount     Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String

  @@map("balances")
}
